背包问题九讲 2.0 alpha1
崔添翼 (Tianyi Cui, a.k.a. dd_engi)
September 15, 2011
本文题为《背包问题九讲》，从属于《动态规划的思考艺术》系列。
这系列文章的第一版于2007年下半年使用EmacsMuse制作，以HTML格式发
布到网上，转载众多，有一定影响力。
2011年9月，本系列文章由原作者用LATEX重新制作并全面修订，您现在看
到的是2.0 alpha1版本，修订历史及最新版本请访问 https://github.com/tianyicui/
pack 查阅。
本文版权归原作者所有，采用 CC BY-NC-SA 协议发布。
Contents
1 01背包问题 2
1.1 题目 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
1.2 基本思路 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
1.3 优化空间复杂度 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
1.4 初始化的细节问题 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
1.5 一个常数优化 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
1.6 小结 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
2 完全背包问题 4
2.1 题目 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
2.2 基本思路 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
2.3 一个简单有效的优化 . . . . . . . . . . . . . . . . . . . . . . . . . . 5
2.4 转化为01背包问题求解 . . . . . . . . . . . . . . . . . . . . . . . . . 5
2.5 O(V N)的算法 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
2.6 小结 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
3 多重背包问题 6
3.1 题目 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
3.2 基本算法 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
3.3 转化为01背包问题 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
3.4 O(VN)的算法 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
3.5 小结 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
4 混合三种背包问题 8
4.1 问题 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
4.2 01背包与完全背包的混合 . . . . . . . . . . . . . . . . . . . . . . . . 8
4.3 再加上多重背包 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
4.4 小结 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
1
5 二维费用的背包问题 9
5.1 问题 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9
5.2 算法 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9
5.3 物品总个数的限制 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9
5.4 复整数域上的背包问题 . . . . . . . . . . . . . . . . . . . . . . . . . 9
5.5 小结 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9
6 分组的背包问题 10
6.1 问题 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
6.2 算法 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
6.3 小结 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
7 有依赖的背包问题 10
7.1 简化的问题 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
7.2 算法 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
7.3 较一般的问题 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
7.4 小结 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
8 泛化物品 11
8.1 定义 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
8.2 泛化物品的和 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
8.3 背包问题的泛化物品 . . . . . . . . . . . . . . . . . . . . . . . . . . 12
8.4 小结 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
9 背包问题问法的变化 13
9.1 输出方案 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
9.2 输出字典序最小的最优方案 . . . . . . . . . . . . . . . . . . . . . . 13
9.3 求方案总数 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
9.4 最优方案的总数 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
9.5 求次优解、第K优解 . . . . . . . . . . . . . . . . . . . . . . . . . . 14
9.6 小结 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
1 01背包问题
1.1 题目
有N件物品和一个容量为V 的背包。放入第i件物品耗费的空间是Ci，得到
的价值是Wi。求解将哪些物品装入背包可使价值总和最大。
1.2 基本思路
这是最基础的背包问题，特点是：每种物品仅有一件，可以选择放或不
放。
用子问题定义状态：即F[i, v]表示前i件物品恰放入一个容量为v的背包可以
获得的最大价值。则其状态转移方程便是：
F[i, v] = max{F[i − 1, v], F[i − 1, v − Ci
] + Wi}
这个方程非常重要，基本上所有跟背包相关的问题的方程都是由它衍生
出来的。所以有必要将它详细解释一下：“将前i件物品放入容量为v的背包
2
中”这个子问题，若只考虑第i件物品的策略（放或不放），那么就可以转化
为一个只和前i − 1件物品相关的问题。如果不放第i件物品，那么问题就转化
为“前i − 1件物品放入容量为v的背包中”，价值为F[i − 1, v]；如果放第i件物
品，那么问题就转化为“前i − 1件物品放入剩下的容量为v − Ci的背包中”，
此时能获得的最大价值就是F[i − 1, v − Ci
]再加上通过放入第i件物品获得的价
值Wi。
伪代码如下：
F[0, 0..V ] = 0
for i = 1 to N
for v = Ci
to V
F[i, v] = max{F[i − 1, v], F[i − 1, v − Ci
] + Wi}
1.3 优化空间复杂度
以上方法的时间和空间复杂度均为O(V N)，其中时间复杂度应该已经不能
再优化了，但空间复杂度却可以优化到O(V )。
先考虑上面讲的基本思路如何实现，肯定是有一个主循环i = 1..N，每次
算出来二维数组F[i, 0..V ]的所有值。那么，如果只用一个数组F[0..V ]，能不
能保证第i次循环结束后F[v]中表示的就是我们定义的状态F[i, v]呢？F[i, v]是
由F[i − 1, v]和F[i − 1, v − Ci
]两个子问题递推而来，能否保证在推F[i, v]时（也
即在第i次主循环中推F[v]时）能够取用F[i − 1, v]和F[i − 1, v − Ci
]的值呢？事
实上，这要求在每次主循环中我们以v = V..0的递减顺序计算F[v]，这样才能保
证推F[v]时F[v − Ci
]保存的是状态F[i − 1, v − Ci]的值。伪代码如下：
F[0..V ] = 0
for i = 1 to N
for v = V to Ci
F[v] = max{F[v], F[v − Ci
] + Wi}
其中的F[v] = max{F[v], F[v − Ci
] + Wi}一句，恰就对应于我们原来的转移方
程，因为现在的F[v − Ci
]就相当于原来的F[i − 1, v − Ci
]。如果将v的循环顺序
从上面的逆序改成顺序的话，那么则成了F[i, v]由F[i, v − Ci
]推导得到，与本题
意不符。
事实上，使用一维数组解01背包的程序在后面会被多次用到，所以这里抽象
出一个处理一件01背包中的物品过程，以后的代码中直接调用不加说明。
def ZeroOnePack(F, C, W)
for v = V to C
F[v] = max(F[v], f[v − C] + W)
有了这个过程以后，01背包问题的伪代码就可以这样写：
for i = 1 to N
ZeroOnePack(F, Ci
, Wi
)
1.4 初始化的细节问题
我们看到的求最优解的背包问题题目中，事实上有两种不太相同的问法。
有的题目要求“恰好装满背包”时的最优解，有的题目则并没有要求必须把背
包装满。一种区别这两种问法的实现方法是在初始化的时候有所不同。
3
如果是第一种问法，要求恰好装满背包，那么在初始化时除了F[0]为0，其
它F[1..V ]均设为−∞，这样就可以保证最终得到的F[V ]是一种恰好装满背包的
最优解。
如果并没有要求必须把背包装满，而是只希望价格尽量大，初始化时应该
将F[0..V ]全部设为0。
这是为什么呢？可以这样理解：初始化的F数组事实上就是在没有任何物
品可以放入背包时的合法状态。如果要求背包恰好装满，那么此时只有容量
为0的背包可以在什么也不装且价值为0的情况下被“恰好装满”，其它容量的
背包均没有合法的解，属于未定义的状态，应该被赋值为-∞了。如果背包并非
必须被装满，那么任何容量的背包都有一个合法解“什么都不装”，这个解的
价值为0，所以初始时状态的值也就全部为0了。
这个小技巧完全可以推广到其它类型的背包问题，后面也就不再对进行状
态转移之前的初始化进行讲解。
1.5 一个常数优化
上面伪代码中的
for i = 1 to N
for v = V to Ci
中第二重循环的下限可以改进。它可以被优化为
for i = 1 to N
for v = V to max(V − Σ
N
i Wi
, Ci)
这个优化之所以成立的原因请读者自己思考。（提示：使用二维的转移方程思
考较易。）
1.6 小结
01背包问题是最基本的背包问题，它包含了背包问题中设计状态、方程的最
基本思想。另外，别的类型的背包问题往往也可以转换成01背包问题求解。故
一定要仔细体会上面基本思路的得出方法，状态转移方程的意义，以及空间复
杂度怎样被优化。
2 完全背包问题
2.1 题目
有N种物品和一个容量为V 的背包，每种物品都有无限件可用。放入第i种
物品的耗费的空间是Ci，得到的价值是Wi。求解：将哪些物品装入背包，可使
这些物品的耗费的空间总和不超过背包容量，且价值总和最大。
2.2 基本思路
这个问题非常类似于01背包问题，所不同的是每种物品有无限件。也就是从
每种物品的角度考虑，与它相关的策略已并非取或不取两种，而是有取0件、
取1件、取2件……直至取⌊V /Ci⌋件等很多种。
4
如果仍然按照解01背包时的思路，令F[i, v]表示前i种物品恰放入一个容量
为v的背包的最大权值。仍然可以按照每种物品不同的策略写出状态转移方
程，像这样：
F[i, v] = max{F[i − 1, v − kCi
] + kWi
| 0 ≤ kCi ≤ v}
这跟01背包问题一样有O(V N)个状态需要求解，但求解每个状态的时
间已经不是常数了，求解状态F[i, v]的时间是O( C
v
i
)，总的复杂度可以认为
是O(NV Σ
V
Ci
)，是比较大的。
将01背包问题的基本思路加以改进，得到了这样一个清晰的方法。这说明01
背包问题的方程的确是很重要，可以推及其它类型的背包问题。但我们还是要
试图改进这个复杂度。
2.3 一个简单有效的优化
完全背包问题有一个很简单有效的优化，是这样的：若两件物品i、j满
足Ci ≤ Cj且Wi ≥ Wj，则将可以将物品j直接去掉，不用考虑。
这个优化的正确性是显然的：任何情况下都可将价值小耗费高的j换成物美
价廉的i，得到的方案至少不会更差。对于随机生成的数据，这个方法往往会大
大减少物品的件数，从而加快速度。然而这个并不能改善最坏情况的复杂度，
因为有可能特别设计的数据可以一件物品也去不掉。
这个优化可以简单的O(N2
)地实现，一般都可以承受。另外，针对背包
问题而言，比较不错的一种方法是：首先将费用大于V 的物品去掉，然后使
用类似计数排序的做法，计算出费用相同的物品中价值最高的是哪个，可
以O(V + N)地完成这个优化。这个不太重要的过程就不给出伪代码了，希望你
能独立思考写出伪代码或程序。
2.4 转化为01背包问题求解
01背包问题是最基本的背包问题，我们可以考虑把完全背包问题转化为01背
包问题来解。
最简单的想法是，考虑到第i种物品最多选⌊
V
Ci
⌋
件，于是可以把第i种物品转
化为⌊
V
Ci
⌋
件费用及价值均不变的物品，然后求解这个01背包问题。这样的做法
完全没有改进时间复杂度，但这种方法也指明了将完全背包问题转化为01背包
问题的思路：将一种物品拆成多件只能选0件或1件的01背包中的物品。
更高效的转化方法是：把第i种物品拆成费用为Ci2
k、价值为Wi2
k的若干件
物品，其中k取遍满足Ci2
k ≤ V 的非负整数。
这是二进制的思想。因为，不管最优策略选几件第i种物品，其件数写成
二进制后，总可以表示成若干个2
k件物品的和。这样一来就把每种物品拆
成O(log V
Ci
)件物品，是一个很大的改进。
2.5 O(V N)的算法
这个算法使用一维数组，先看伪代码：
F[0..V ] = 0
for i = 1 to N
for v = Ci
to V
F[v] = max(F[v], F[v − Ci
] + Wi)
5
你会发现，这个伪代码与01背包问题的伪代码只有v的循环次序不同而已。
为什么这个算法就可行呢？首先想想为什么01背包中要按照v递减的次序来
循环。让v递减是为了保证第i次循环中的状态F[i, v]是由状态F[i − 1, v − Ci
]递
推而来。换句话说，这正是为了保证每件物品只选一次，保证在考虑“选入
第i件物品”这件策略时，依据的是一个绝无已经选入第i件物品的子结果F[i −
1, v − Ci
]。而现在完全背包的特点恰是每种物品可选无限件，所以在考虑“加
选一件第i种物品”这种策略时，却正需要一个可能已选入第i种物品的子结
果F[i, v − Ci
]，所以就可以并且必须采用v递增的顺序循环。这就是这个简单的
程序为何成立的道理。
值得一提的是，上面的伪代码中两层for循环的次序可以颠倒。这个结论有
可能会带来算法时间常数上的优化。
这个算法也可以由另外的思路得出。例如，将基本思路中求解F[i, v − Ci
]的
状态转移方程显式地写出来，代入原方程中，会发现该方程可以等价地变形成
这种形式：
F[i, v] = max(F[i − 1, v], F[i, v − Ci
] + Wi)
将这个方程用一维数组实现，便得到了上面的伪代码。
最后抽象出处理一件完全背包类物品的过程伪代码：
def CompletePack(F, C, W)
for v = C to V
F[v] = max{F[v], f[v − C] + W}
2.6 小结
完全背包问题也是一个相当基础的背包问题，它有两个状态转移方程。希
望你能够对这两个状态转移方程都仔细地体会，不仅记住，也要弄明白它们是
怎么得出来的，最好能够自己想一种得到这些方程的方法。
事实上，对每一道动态规划题目都思考其方程的意义以及如何得来，是加
深对动态规划的理解、提高动态规划功力的好方法。
3 多重背包问题
3.1 题目
有N种物品和一个容量为V 的背包。第i种物品最多有Mi件可用，每件耗费
的空间是Ci，价值是Wi。求解将哪些物品装入背包可使这些物品的耗费的空间
总和不超过背包容量，且价值总和最大。
3.2 基本算法
这题目和完全背包问题很类似。基本的方程只需将完全背包问题的方程略
微一改即可。
因为对于第i种物品有Mi+1种策略：取0件，取1件……取Mi件。令F[i, v]表
示前i种物品恰放入一个容量为v的背包的最大价值，则有状态转移方程：
F[i，v] = max{F[i − 1, v − k ∗ Ci
] + k ∗ Wi
| 0 ≤ k ≤ Mi}
复杂度是O(V ΣMi)。
6
3.3 转化为01背包问题
另一种好想好写的基本方法是转化为01背包求解：把第i种物品换成Mi件01
背包中的物品，则得到了物品数为ΣMi的01背包问题。直接求解之，复杂度仍
然是O(V ΣMi)。
但是我们期望将它转化为01背包问题之后，能够像完全背包一样降低复杂
度。
仍然考虑二进制的思想，我们考虑把第i种物品换成若干件物品，使得原问
题中第i种物品可取的每种策略——取0 . . . Mi件——均能等价于取若干件代换
以后的物品。另外，取超过Mi件的策略必不能出现。
方法是：将第i种物品分成若干件01背包中的物品，其中每件物品有一个系
数。这件物品的费用和价值均是原来的费用和价值乘以这个系数。令这些系数
分别为1, 2, 2
2
. . . 2
k−1
, Mi − 2
k + 1，且k是满足Mi − 2
k + 1 > 0的最大整数。例
如，如果Mi为13，则相应的k = 3，这种最多取13件的物品应被分成系数分别
为1, 2, 4, 6的四件物品。
分成的这几件物品的系数和为Mi，表明不可能取多于Mi件的第i种物品。另
外这种方法也能保证对于0 . . . Mi间的每一个整数，均可以用若干个系数的和表
示。这里算法正确性的证明可以分0 . . . 2
k−1和2
k
. . . Mi两段来分别讨论得出，
希望读者自己思考尝试一下。
这样就将第i种物品分成了O(logMi)种物品，将原问题转化为了复杂度
为O(V ΣlogMi)的01背包问题，是很大的改进。
下面给出O(logM)时间处理一件多重背包中物品的过程：
def MultiplePack(F,C,W,M)
if C · M ≥ V
CompletePack(F,C,W)
return
k := 1
while k < M
ZeroOnePack(kC,kW)
M := M − k
k := 2k
ZeroOnePack(C · M,W · M)
希望你仔细体会这个伪代码，如果不太理解的话，不妨翻译成程序代码以后，
单步执行几次，或者头脑加纸笔模拟一下，以加深理解。
3.4 O(VN)的算法
多重背包问题同样有O(V N)复杂度的算法。这个算法基于基本算法的状态
转移方程，但应用单调队列的方法使每个状态的值可以以均摊O(1)的时间求
解。我最初了解到这个方法是在楼天成的“男人八题”幻灯片上。（TODO：
是否在此插入单调队列的讲解呢？）
3.5 小结
在这一讲中，我们看到了将一个算法的复杂度由O(V ΣMi)改进到O(V ΣlogMi)的
过程，还知道了存在复杂度为O(V N)的算法。
希望你特别注意“拆分物品”的思想和方法，自己证明一下它的正确性，
并将完整的程序代码写出来。
7
4 混合三种背包问题
4.1 问题
如果将前面1、2、3中的三种背包问题混合起来。也就是说，有的物品只可
以取一次（01背包），有的物品可以取无限次（完全背包），有的物品可以取
的次数有一个上限（多重背包）。应该怎么求解呢？
4.2 01背包与完全背包的混合
考虑到01背包和完全背包中给出的伪代码只有一处不同，故如果只有两类
物品：一类物品只能取一次，另一类物品可以取无限次，那么只需在对每个
物品应用转移方程时，根据物品的类别选用顺序或逆序的循环即可，复杂度
是O(V N)。伪代码如下：
for i = 1 to N
if 第i件物品属于01背包
for v = V to Ci
F[v] = max(F[v], F[v − Ci
] + Wi)
else if 第i件物品属于完全背包
for v = Ci
to V
F[v] = max(F[v], F[v − Ci
] + Wi)
4.3 再加上多重背包
如果再加上最多可以取有限次的多重背包式的物品，那么利用单调队列，
也可以给出均摊O(V N)的解法。
但如果不考虑单调队列算法的话，用将每个这类物品分成O(logMi)个01背包
的物品的方法也已经很优了。
当然，最清晰的写法是调用我们前面给出的三个过程。
for i = 1 to N
if 第i件物品属于01背包
ZeroOnePack(F,Ci
,Wi
)
else if 第i件物品属于完全背包
CompletePack(F,Ci
,Wi
)
else if 第i件物品属于多重背包
MultiplePack(F,Ci
,Wi
,Ni
)
在最初写出这三个过程的时候，可能完全没有想到它们会在这里混合应用。我
想这体现了编程中抽象的威力。如果你一直就是以这种“抽象出过程”的方式
写每一类背包问题的，也非常清楚它们的实现中细微的不同，那么在遇到混合
三种背包问题的题目时，一定能很快想到上面简洁的解法，对吗？
4.4 小结
有人说，困难的题目都是由简单的题目叠加而来的。这句话是否公理暂且
存之不论，但它在本讲中已经得到了充分的体现。本来01背包、完全背包、多
重背包都不是什么难题，但将它们简单地组合起来以后就得到了这样一道一定
能吓倒不少人的题目。但只要基础扎实，领会三种基本背包问题的思想，就可
以做到把困难的题目拆分成简单的题目来解决。
8
5 二维费用的背包问题
5.1 问题
二维费用的背包问题是指：对于每件物品，具有两种不同的空间耗费，选
择这件物品必须同时付出这两种代价。对于每种代价都有一个可付出的最大值
（背包容量）。问怎样选择物品可以得到最大的价值。
设这两种代价分别为代价一和代价二，第i件物品所需的两种代价分别
为Ci和Di。两种代价可付出的最大值（两种背包容量）分别为V 和U。物品的
价值为Wi。
5.2 算法
费用加了一维，只需状态也加一维即可。设F[i, v, u]表示前i件物品付出两
种代价分别为v和u时可获得的最大价值。状态转移方程就是：
F[i, v, u] = max{F[i − 1, v, u], F[i − 1, v − Ci
, u − Di
] + Wi}
如前述优化空间复杂度的方法，可以只使用二维的数组：当每件物品只可
以取一次时变量v和u采用逆序的循环，当物品有如完全背包问题时采用顺序的
循环，当物品有如多重背包问题时拆分物品。
这里就不再给出伪代码了，相信有了前面的基础，读者应该能够自己实现
出这个问题的程序。
5.3 物品总个数的限制
有时，“二维费用”的条件是以这样一种隐含的方式给出的：最多只能
取U件物品。这事实上相当于每件物品多了一种“件数”的费用，每个物品的
件数费用均为1，可以付出的最大件数费用为U。换句话说，设F[v, u]表示付
出费用v、最多选u件时可得到的最大价值，则根据物品的类型（01、完全、多
重）用不同的方法循环更新，最后在f[0 . . . V, 0 . . . U]范围内寻找答案。
5.4 复整数域上的背包问题
另一种看待二维背包问题的思路是：将它看待成复整数域上的背包问题。
也就是说，背包的容量以及每件物品的费用都是一个复整数。而常见的一维背
包问题则是自然数域上的背包问题。所以说，一维背包的种种思想方法，往往
可以应用于二位背包问题的求解中，因为只是数域扩大了而已。
作为这种思想的练习，你可以尝试将后文中提到的“子集和问题”扩展到
二维，并试图用同样的复杂度解决。
5.5 小结
当发现由熟悉的动态规划题目变形得来的题目时，在原来的状态中加一维
以满足新的限制是一种比较通用的方法。希望你能从本讲中初步体会到这种方
法。
9
6 分组的背包问题
6.1 问题
有N件物品和一个容量为V 的背包。第i件物品的费用是Ci，价值是Wi。这
些物品被划分为K组，每组中的物品互相冲突，最多选一件。求解将哪些物品
装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。
6.2 算法
这个问题变成了每组物品有若干种策略：是选择本组的某一件，还是一件
都不选。也就是说设F[k, v]表示前k组物品花费费用v能取得的最大权值，则
有：
F[k, v] = max{F[k − 1, v], F[k − 1, v − Ci
] + Wi
| item i ∈ group k}
使用一维数组的伪代码如下：
for k = 1 to K
for v = V to 0
for item i in group k
F[v] = max{F[v], F[v − Ci
] + Wi}
这里三层循环的顺序保证了每一组内的物品最多只有一个会被添加到背包中。
另外，显然可以对每组内的物品应用2.3中的优化。
6.3 小结
分组的背包问题将彼此互斥的若干物品称为一个组，这建立了一个很好的
模型。不少背包问题的变形都可以转化为分组的背包问题（例如7），由分组的
背包问题进一步可定义“泛化物品”的概念，十分有利于解题。
7 有依赖的背包问题
7.1 简化的问题
这种背包问题的物品间存在某种“依赖”的关系。也就是说，物品i依赖于
物品j，表示若选物品i，则必须选物品j。为了简化起见，我们先设没有某个物
品既依赖于别的物品，又被别的物品所依赖；另外，没有某件物品同时依赖多
件物品。
7.2 算法
这个问题由NOIP2006题目中金明的预算方案一题扩展而来。遵从该题的提
法，将不依赖于别的物品的物品称为“主件”，依赖于某主件的物品称为“附
件”。由这个问题的简化条件可知所有的物品由若干主件和依赖于每个主件的
一个附件集合组成。
按照背包问题的一般思路，仅考虑一个主件和它的附件集合。可是，可用
的策略非常多，包括：一个也不选，仅选择主件，选择主件后再选择一个附
件，选择主件后再选择两个附件……无法用状态转移方程来表示如此多的策
略。事实上，设有n个附件，则策略有2
n + 1个，为指数级。
10
考虑到所有这些策略都是互斥的（也就是说，你只能选择一种策略），所
以一个主件和它的附件集合实际上对应于6中的一个物品组，每个选择了主件又
选择了若干个附件的策略对应于这个物品组中的一个物品，其费用和价值都是
这个策略中的物品的值的和。但仅仅是这一步转化并不能给出一个好的算法，
因为物品组中的物品还是像原问题的策略一样多。
再考虑对每组内的物品应用2.3中的优化。我们可以想到，对于第k个物品组
中的物品，所有费用相同的物品只留一个价值最大的，不影响结果。所以，可
以对主件k的“附件集合”先进行一次01背包，得到费用依次为0. . .V − Ck所
有这些值时相应的最大价值Fk[0 . . . V − Ck]。那么，这个主件及它的附件集合
相当于V − Ck + 1个物品的物品组，其中费用为v的物品的价值为Fk[v − Ck] +
Wk，v的取值范围是Ck ≤ v ≤ V 。
也就是说，原来指数级的策略中，有很多策略都是冗余的，通过一次01背包
后，将主件k及其附件转化为V − Ck + 1个物品的物品组，就可以直接应用6的
算法解决问题了。
7.3 较一般的问题
更一般的问题是：依赖关系以图论中“森林”1的形式给出。也就是说，主
件的附件仍然可以具有自己的附件集合。限制只是每个物品最多只依赖于一个
物品（只有一个主件）且不出现循环依赖。
解决这个问题仍然可以用将每个主件及其附件集合转化为物品组的方式。
唯一不同的是，由于附件可能还有附件，就不能将每个附件都看作一个一般
的01背包中的物品了。若这个附件也有附件集合，则它必定要被先转化为物品
组，然后用分组的背包问题解出主件及其附件集合所对应的附件组中各个费用
的附件所对应的价值。
事实上，这是一种树形动态规划，其特点是，在用动态规划求每个父节点
的属性之前，需要对它的各个儿子的属性进行一次动态规划式的求值。这已经
触及到了“泛化物品”的思想。看完8后，你会发现这个“依赖关系树”每一个
子树都等价于一件泛化物品，求某节点为根的子树对应的泛化物品相当于求其
所有儿子的对应的泛化物品之和。
7.4 小结
NOIP2006的那道背包问题我做得很失败，写了上百行的代码，却一分未
得。后来我通过思考发现通过引入“物品组”和“依赖”的概念可以加深对这
题的理解，还可以解决它的推广问题。用物品组的思想考虑那题中极其特殊的
依赖关系：物品不能既作主件又作附件，每个主件最多有两个附件，可以发现
一个主件和它的两个附件等价于一个由四个物品组成的物品组，这便揭示了问
题的某种本质。
后来，我在《背包问题九讲》第一版中总结此事时说：“失败不是什么丢
人的事情，从失败中全无收获才是。”NOIP2007我得了满分。
8 泛化物品
8.1 定义
考虑这样一种物品，它并没有固定的费用和价值，而是它的价值随着你分
配给它的费用而变化。这就是泛化物品的概念。
1即多叉树的集合
11
更严格的定义之。在背包容量为V 的背包问题中，泛化物品是一个定义
域为0 . . . V 中的整数的函数h，当分配给它的费用为v时，能得到的价值就
是h(v)。
这个定义有一点点抽象，另一种理解是一个泛化物品就是一个数组h[0 . . . V ]，
给它费用v，可得到价值h[v]。
一个费用为c价值为w的物品，如果它是01背包中的物品，那么把它看成泛
化物品，它就是除了h(c) = w外，其它函数值都为0的一个函数。如果它是完
全背包中的物品，那么它可以看成这样一个函数，仅当v被c整除时有h(v) =
w ·
v
c，其它函数值均为0。如果它是多重背包中重复次数最多为m的物品，那么
它对应的泛化物品的函数有h(v) = w ·
v
c仅当v被c整除且v
c ≤ n，其它情况函数
值均为0。
一个物品组可以看作一个泛化物品h。对于一个0 . . . V 中的v，若物品组中不
存在费用为v的物品，则h(v) = 0，否则h(v)取值为所有费用为v的物品的最大
价值。6中每个主件及其附件集合等价于一个物品组，自然也可看作一个泛化物
品。
8.2 泛化物品的和
如果给定了两个泛化物品h和l，要用一定的费用从这两个泛化物品中得到最
大的价值，这个问题怎么求呢？事实上，对于一个给定的费用v，只需枚举将
这个费用如何分配给两个泛化物品就可以了。同样的，对于0. . .V 中的每一个整
数v，可以求得费用v分配到h和l中的最大价值f(v)。也即
f(v) = max{h(k) + l(v − k) | 0 ≤ k ≤ v}
可以看到，这里的f是一个由泛化物品h和l决定的定义域为0. . .V的函数，也
就是说，f是一个由泛化物品h和l决定的泛化物品。
我们将f定义为泛化物品h和l的和：h、l都是泛化物品，若函数f满足以上关
系式，则称f是h与l的和。泛化物品和运算的时间复杂度取决于背包的容量，
是O(V
2
)。
由泛化物品的定义可知：在一个背包问题中，若将两个泛化物品代以它们
的和，不影响问题的答案。事实上，对于其中的物品都是泛化物品的背包问
题，求它的答案的过程也就是求所有这些泛化物品之和的过程。若问题的和
为s，则答案就是s(0 . . . V )中的最大值。
8.3 背包问题的泛化物品
一个背包问题中，可能会给出很多条件，包括每种物品的费用、价值等属
性，物品之间的分组、依赖等关系等。但肯定能将问题对应于某个泛化物品。
也就是说，给定了所有条件以后，就可以对每个非负整数v求得：若背包容量
为v，将物品装入背包可得到的最大价值是多少，这可以认为是定义在非负整
数集上的一件泛化物品。这个泛化物品——或者说问题所对应的一个定义域为
非负整数的函数——包含了关于问题本身的高度浓缩的信息。一般而言，求得
这个泛化物品的一个子定义域（例如0. . .V ）的值之后，就可以根据这个函数的
取值得到背包问题的最终答案。
综上所述，一般而言，求解背包问题，即求解这个问题所对应的一个函
数，即该问题的泛化物品。而求解某个泛化物品的一种常用方法就是将它表示
为若干泛化物品的和然后求之。
12
8.4 小结
本讲是我在学习函数式编程的Scheme语言时，用函数编程的眼光审视各类
背包问题得出的理论。
我想说：“思考”是一个程序员最重要的品质。简单的问题，深入思考以
后，也能发现更多。
9 背包问题问法的变化
以上涉及的各种背包问题都是要求在背包容量（费用）的限制下求可以取
到的最大价值，但背包问题还有很多种灵活的问法，在这里值得提一下。但是
我认为，只要深入理解了求背包问题最大价值的方法，即使问法变化了，也是
不难想出算法的。
例如，求解最多可以放多少件物品或者最多可以装满多少背包的空间。这
都可以根据具体问题利用前面的方程求出所有状态的值（F数组）之后得到。
还有，如果要求的是“总价值最小”“总件数最小”，只需简单的将上面
的状态转移方程中的max改成min即可。
下面说一些变化更大的问法。
9.1 输出方案
一般而言，背包问题是要求一个最优值，如果要求输出这个最优值的方
案，可以参照一般动态规划问题输出方案的方法：记录下每个状态的最优值是
由状态转移方程的哪一项推出来的，换句话说，记录下它是由哪一个策略推出
来的。便可根据这条策略找到上一个状态，从上一个状态接着向前推即可。
还是以01背包为例，方程为F[i, v] = max{F[i−1, v], F[i−1, v − Ci
] +Wi}。
再用一个数组G[i, v]，设G[i, v] = 0表示推出F[i, v]的值时是采用了方程的前一
项（也即F[i, v] = F[i − 1, v]），G[i, v] = 1表示采用了方程的后一项。注意这
两项分别表示了两种策略：未选第i个物品及选了第i个物品。那么输出方案的
伪代码可以这样写（设最终状态为F[N, V ]）：
i := N
v := V
while i > 0
if G[i, v] = 0
print 未选第i项物品
else if G[i, v] = 1
print 选了第i项物品
v := v − Ci
i := i − 1
另外，采用方程的前一项或后一项也可以在输出方案的过程中根据F[i, v]的值
实时地求出来。也即，不须纪录G数组，将上述代码中的G[i, v] = 0改成F[i, v] =
F[i − 1, v]，G[i, v] = 1改成F[i, v] = F[i − 1][v − Ci
] + Wi也可。
9.2 输出字典序最小的最优方案
这里“字典序最小”的意思是1 . . . N号物品的选择方案排列出来以后字典序
最小。以输出01背包最小字典序的方案为例。
一般而言，求一个字典序最小的最优方案，只需要在转移时注意策略。
13
首先，子问题的定义要略改一些。我们注意到，如果存在一个选了物品1的
最优方案，那么答案一定包含物品1，原问题转化为一个背包容量为V − C1，
物品为2 . . . N的子问题。反之，如果答案不包含物品1，则转化成背包容量仍
为V ，物品为2 . . . N的子问题。
不管答案怎样，子问题的物品都是以i . . . N而非前所述的1 . . . i的形式来定
义的，所以状态的定义和转移方程都需要改一下。
但也许更简易的方法是，先把物品编号做x := N + 1 − x的变换，在输
出方案时再变换回来。在做完物品编号的变换后，可以按照前面经典的转移
方程来求值。只是在输出方案时要注意，如果F[i, v] = F[i − 1, v]和F[i, v] =
F[i − 1][v − Ci
] + Wi都成立，应该按照后者来输出方案，即选择了物品i，输出
其原来的编号N − 1 − i。
9.3 求方案总数
对于一个给定了背包容量、物品费用、物品间相互关系（分组、依赖等）
的背包问题，除了再给定每个物品的价值后求可得到的最大价值外，还可以得
到装满背包或将背包装至某一指定容量的方案总数。
对于这类改变问法的问题，一般只需将状态转移方程中的max改成sum即
可。例如若每件物品均是完全背包中的物品，转移方程即为
F[i, v] = sumF[i − 1, v], F[i, v − Ci
]
初始条件是F[0, 0] = 1。
事实上，这样做可行的原因在于状态转移方程已经考察了所有可能的背包
组成方案。
9.4 最优方案的总数
这里的最优方案是指物品总价值最大的方案。以01背包为例。
结合求最大总价值和方案总数两个问题的思路，最优方案的总数可以这样
求：F[i, v]代表该状态的最大价值，G[i, v]表示这个子问题的最优方案的总数，
则在求F[i, v]的同时求G[i, v]的伪代码如下：
G[0, 0] = 1
for i = 1 to N
for v = 0 to V
F[i, v] := max{F[i − 1, v], F[i − 1, v − Ci
] + Wi}
G[i, v] := 0
if F[i, v] = F[i − 1, v]
G[i, v]+ = G[i − 1][v]
if F[i, v] = F[i − 1, v − Ci
] + Wi
G[i, v]+ = G[i − 1][v − Ci
]
如果你是第一次看到这样的问题，请仔细体会上面的伪代码。
9.5 求次优解、第K优解
对于求次优解、第K优解类的问题，如果相应的最优解问题能写出状态转移
方程、用动态规划解决，那么求次优解往往可以相同的复杂度解决，第K优解
则比求最优解的复杂度上多一个系数K。
14
其基本思想是，将每个状态都表示成有序队列，将状态转移方程中的max/min转
化成有序队列的合并。
这里仍然以01背包为例讲解一下。
首先看01背包求最优解的状态转移方程：F[i, v] = max{F[i − 1, v], F[i −
1, v − Ci
] + Wi}。如果要求第K优解，那么状态F[i, v]就应该是一个大小为K的
队列F[i, v, 1 . . . K]。其中F[i, v, k]表示前i个物品中，背包大小为v时，第k优解
的值。这里也可以简单地理解为在原来的方程中加了一维来表示结果的优先次
序。显然f[i, v, 1 . . . K]这K个数是由大到小排列的，所以它可看作是一个有序
队列。
然后原方程就可以解释为：F[i, v]这个有序队列是由F[i − 1, v]和F[i − 1,v −
Ci
] + Wi这两个有序队列合并得到的。前者F[i − 1][V ]即F[i − 1, v, 1 . . . K]，后
者F[i − 1,v − Ci
] + Wi则理解为在F[i − 1,v − Ci
, 1 . . . K]的每个数上加上Wi后得
到的有序队列。合并这两个有序队列并将结果的前K项储存到f[i, v, 1 . . . K]中
的 复 杂 度 是O(K)。 最 后 的 第K优 解 的 答 案 是F[N, V, K]。 总 的 时 间 复 杂 度
是O(V NK)。
为什么这个方法正确呢？实际上，一个正确的状态转移方程的求解过程遍
历了所有可用的策略，也就覆盖了问题的所有方案。只不过由于是求最优解，
所以其它在任何一个策略上达不到最优的方案都被忽略了。如果把每个状态表
示成一个大小为K的数组，并在这个数组中有序地保存该状态可取到的前K个
最优值。那么，对于任两个状态的max运算等价于两个由大到小的有序队列的
合并。
另外还要注意题目对于“第K优解”的定义，是要求将策略不同但权值相同
的两个方案是看作同一个解还是不同的解。如果是前者，则维护有序队列时要
保证队列里的数没有重复的。
9.6 小结
显然，这里不可能穷尽背包类动态规划问题所有的问法。甚至还存在一类
将背包类动态规划问题与其它领域（例如数论、图论）结合起来的问题，在这
篇论背包问题的专文中也不会论及。但只要深刻领会前述所有类别的背包问题
的思路和状态转移方程，遇到其它的变形问题，应该也不难想出算法。
触类旁通、举一反三，应该也是一个程序员应有的品质吧。
15
